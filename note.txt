php artisan db:seed --class=UserSeeder
php artisan test --filter=CustomerTest

FITUR

Jenis user:
- Master
- Admin
- Teknisi

Master:
- Input data admin
- Create password admin
- Input Tiket
- Assign Tiket ke teknisi
- Generate & Cetak laporan

Admin
- Input Tiket
- Assign Tiket ke teknisi
- Generate & Cetak Laporan

Teknisi
- Take Tiket
- Update progress kerja di tiket

Jenis laporan:
- Laporan kinerja teknisi: Melihat kinerja teknisi dalam rentang waktu minggu/bulan
- Tiket: Melihat data status tiket dalam rentang waktu minggu/bulan.


php artisan config:clear
php artisan cache:clear
php artisan route:clear
php artisan view:clear
php artisan config:cache
php artisan route:cache
php artisan view:cache

=============================================

php artisan config:clear
php artisan view:clear
php artisan route:clear
php artisan optimize:clear

rm public/hot


Pertanyaan ini sangat penting, karena banyak orang keliru menggunakan load() vs with() — padahal fungsinya berbeda konteks dan bisa menimbulkan bug atau query tidak efektif.
🔍 Perbedaan Utama:
with()	load()
Dipakai saat query awal	Dipakai setelah data diambil
Menyisipkan eager loading di SQL	Melakukan eager loading setelah get()
Lebih efisien karena 1 query	Bisa menyebabkan query tambahan
Digunakan di query builder	Digunakan pada instance model
✅ Contoh 1 — Pakai with() (Direkomendasikan)

$customers = Customer::with('networks')->get();

    Artinya: Ambil semua customer dengan relasi networks dalam 2 query sekaligus.

    Hasilnya: Eloquent akan optimalkan query-nya untuk performa.

    ✅ Efisien dan performa bagus.

⚠️ Contoh 2 — Pakai load() (Kurang tepat di sini)

$customers = Customer::all();
$customers->load('networks');

    Ini dua langkah:

        Ambil semua customer

        Kemudian baru load relasi networks-nya

    Laravel tetap efisien (pakai eager loading juga di belakang layar), tapi ini tidak lebih bagus dari with().

    Cocok digunakan kalau kamu sudah punya instance model dan ingin tambah relasi secara dinamis.

❌ Salah: Customer::load('networks')

Ini salah secara sintaks, karena load() bukan static method. Contoh ini akan error:

$customers = Customer::load('networks'); // ❌ Salah

Yang benar adalah:

    load() hanya bisa dipanggil pada instance atau collection model:

$customer = Customer::find(1);
$customer->load('networks'); // ✅ Benar

atau

    $customers = Customer::all();
    $customers->load('networks'); // ✅ Benar

🧠 Kesimpulan

Gunakan:
✅ with() → Saat kamu sedang mengambil data dari database:

Customer::with('networks')->get(); // lebih efisien

✅ load() → Saat kamu sudah punya model/collection, lalu ingin menambahkan relasi:

$customer = Customer::find(1);
$customer->load('networks');

❌ Jangan pakai Customer::load(...) — itu akan error.


// To test the email sending functionality, you can use the following command in your terminal:
// Make sure you have the necessary setup in your .env file for mail configuration.
// Open your terminal and run the following command:


==================================================================================================
Test Email Sending in Laravel
==================================================================================================
php artisan tinker

Mail::to('your@email.com')->send(new \App\Mail\TicketCreatedMail(\App\Models\Task::first()));

=================================================================================================
Custom Markdown Email di Laravel
=================================================================================================
Great! Kalau kamu ingin custom markdown email di Laravel, ada dua pendekatan:
✅ Pendekatan 1: Publish Markdown Mail Views

Laravel menyediakan komponen Blade khusus untuk markdown email (<x-mail::message>, <x-mail::button>, dll). Kalau kamu ingin mengubah style atau layout-nya, kamu harus publish view bawaannya ke project kamu, lalu edit sendiri.
🔧 1. Jalankan Perintah Ini:

php artisan vendor:publish --tag=laravel-mail

    Ini akan menyalin file markdown mail ke:

resources/views/vendor/mail/

📁 Struktur Folder Hasilnya:

resources/views/vendor/mail/
├── html/
│   ├── layout.blade.php       ← Layout HTML utama
│   ├── message.blade.php      ← Komponen <x-mail::message>
│   ├── button.blade.php       ← Komponen <x-mail::button>
│   └── ...
├── text/
│   └── message.blade.php      ← Untuk versi teks (plain text)

✏️ 2. Edit Komponen Sesuai Keinginan

Misalnya kamu mau ubah desain tombol <x-mail::button>:
🔧 Edit resources/views/vendor/mail/html/button.blade.php:

<table role="presentation" border="0" cellpadding="0" cellspacing="0" class="btn btn-primary">
    <tr>
        <td align="center">
            <a href="{{ $url }}" target="_blank"
            style="background-color:#e3342f;padding:12px 24px;color:#fff;text-decoration:none;border-radius:6px;">
                {{ $slot }}
            </a>
        </td>
    </tr>
</table>

    Kamu bisa ubah warna, padding, border-radius, dsb.

🔧 Edit message.blade.php untuk header/footer layout

Misalnya kamu ubah:

<tr>
    <td class="header">
        <a href="{{ $url }}">
            {{ $slot }}
        </a>
    </td>
</tr>

Jadi:

<tr>
    <td class="header" style="text-align: center; background-color: #f5f5f5;">
        <img src="https://your-logo.png" height="50" alt="Your Logo">
    </td>
</tr>

✅ Pendekatan 2: Custom Markdown View Per Email

Kalau kamu mau custom markdown hanya untuk 1 tipe email, kamu bisa buat file markdown sendiri.

Misalnya:
📄 resources/views/emails/tickets/created.blade.php

<x-mail::message>
# Hello, {{ $ticket->user->name }}

A new ticket has been created:

- **Title**: {{ $ticket->title }}
- **Description**: {{ $ticket->description }}

<x-mail::button :url="url('/tickets/' . $ticket->id)">
View Ticket
</x-mail::button>

Thanks,<br>
{{ config('app.name') }}
</x-mail::message>

    Di file ini, kamu tetap bisa pakai <x-mail::...> tapi dengan konten custom.

🔁 Kombinasi Markdown + Custom Style

Kalau kamu publish komponen dan pakai markdown, kamu bisa gabungkan keduanya:

    Buat email view markdown (emails.tickets.created)

    Custom tampilannya via vendor/mail/html/*

💡 Kesimpulan
Opsi	Tujuan	Cara
Publish markdown komponen Laravel	Ubah tampilan seluruh email secara global	php artisan vendor:publish --tag=laravel-mail
Custom markdown per email	Ubah konten email tertentu (pakai <x-mail::message>)	Buat view di resources/views/emails/
Gunakan HTML langsung	Full kontrol tanpa markdown	Gunakan view: 'emails.tickets.created' dan Blade biasa
